1.Serialization:
-----------------------
The process of converting complex data type(model instance, qs) into python native data type(like dict) is called as serialization. The advantage is converting to json is very easy.

models.py
---------------
class Employee(models.Model):
    eno = models.IntegerField()
    ename = models.CharField(max_length=30)
    esal = models.FloatField()
    eaddr = models.CharField(max_length=30)

serializers.py
-------------------
from rest_framework import serializers
class EmployeeSerializer(serializers.Serializer):
    eno = serializers.IntegerField()
    ename = serializers.CharField(max_length=30)
    esal = serializers.FloatField()
    eaddr = serializers.CharField(max_length=30)

-->makemigrations and migrate

admin.py
--------------
from testapp.models import Employee
class EmployeeAdmin(admin.ModelAdmin):
    list_display = ['eno','ename','esal','eaddr']
admin.site.register(Employee,EmployeeAdmin)

Serialization:
--------------------
complex types(like model instance or query set) to python native data type(dict)
		emp object to dictionary	----->	json is very easy

How to do serialization
----------------------------------
Converting employee object to python dict
-----------------------------------------------------------------
goto shell:
	D:\REST_API_28MAY_4PM\withrestc1>py manage.py shell
	>>> from testapp.models import Employee
	>>> from testapp.serializers import EmployeeSerializer
	>>> emp = Employee.objects.get(id=1)
	>>> emp #	<Employee: Employee object (1)>
	>>> serializer = EmployeeSerializer(emp)
	>>> serializer.data 
	{'eno': 101, 'ename': 'Sunny', 'esal': 12000.0, 'eaddr': 'Mumbai'}

How to convert python native type(dict) to json data:
---------------------------------------------------------------------------------
>>> from rest_framework.renderers import JSONRenderer
>>> json_data = JSONRenderer().render(serializer.data)
>>> json_data
b'{"eno":101,"ename":"Sunny","esal":12000.0,"eaddr":"Mumbai"}'

How to perform serialization for qs:
-----------------------------------------------------
>>> qs = Employee.objects.all()
>>> eserializer = EmployeeSerializer(qs,many=True)
>>> eserializer.data
>>> json_data = JSONRenderer().render(eserializer.data)
>>> json_data

Deserialization:
-----------------------
The process of converting python native data type(dict) into database supported complex type(model instance, qs) is called as deserializaton.

Convert json to python native data type:
--------------------------------------------------------------
import io
from rest_framework.parsers import  JSONParser
stream = io.BytesIO(json_data)
pdata = JSONParser().parse(stream)

By deserialization we have to convert python data to DB supported type
--------------------------------------------------------------------------------------------------------------
serializer = EmployeeSerializer(pdata)
serializer.is_valid()
serializer.validated_data

Use case of Serialization and Deserialization:
--------------------------------------------------------------------
1.Partner application wants all employee records in json format
		qs-->python native data type(serialization)
		python native data type--->json data(JSONRenderer().render())

2.Partner application sending json data to create a new employee
		json data---->python native data type(JSONParser().parse())
		python native data type---->DB supported complex form(Deserialization)

Application
------------------
test.py
----------
import requests,json
BASE_URL = 'http://127.0.0.1:8000/'
END_POINT = 'api/'
def get_resource(id = None):
    data = {}
    if id is not None:
        data = {
            'id':id
        }
    resp = requests.get(BASE_URL + END_POINT, data=json.dumps(data))
    print(resp.status_code)
    print(resp.json())
get_resource()

views.py
-------------
import io
from django.views.generic import View
from rest_framework.parsers import  JSONParser
from testapp.models import Employee
from testapp.serializers import EmployeeSerializer
from rest_framework.renderers import JSONRenderer
from django.http import HttpResponse
class EmployeeCRUDCBV(View):
    def get(self,request):
        json_data = request.body
        stream = io.BytesIO(json_data)
        pdata = JSONParser().parse(stream)
        id = pdata.get('id',None)
        if id is not None:
            emp = Employee.objects.get(id=id)
            serializer = EmployeeSerializer(emp)
            json_data = JSONRenderer().render(serializer.data)
            return HttpResponse(json_data,content_type='application/json')
        qs = Employee.objects.all()
        eserializer = EmployeeSerializer(qs, many=True)
        json_data = JSONRenderer().render(eserializer.data)
        return HttpResponse(json_data, content_type='application/json')

urls.py:
	path('api/',views.EmployeeCRUDCBV.as_view())

POST:
---------
	We have to override create() method inside serializer class.

serializers.py
--------------------
from testapp.models import Employee
class EmployeeSerializer(serializers.Serializer):
	-------------
    def create(self, validated_data):
        return Employee.objects.create(**validated_data)

test.py
----------
def create_resource():
    new_emp = {
        'eno':105,
        'ename':'Pinny',
        'esal':18000,
        'eaddr':'Vja'
    }
    resp = requests.post(BASE_URL + END_POINT, data=json.dumps(new_emp))
    print(resp.status_code)
    print(resp.json())
create_resource()

To create resource we have to disable csrf_token

views.py
-------------
import io
from django.http import HttpResponse
from rest_framework.parsers import JSONParser
from rest_framework.renderers import JSONRenderer
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
@method_decorator(csrf_exempt,name='dispatch')
class EmployeeCRUDCBV(View):
    def post(self,request,*args,**kwargs):
        json_data = request.body
        stream = io.BytesIO(json_data)
        pdata = JSONParser().parse(stream)
        serializer = EmployeeSerializer(data=pdata)
        if serializer.is_valid():
            serializer.save()
            msg = {'msg':'Resource created successfully.....'}
            json_data = JSONRenderer().render(msg)
            return HttpResponse(json_data,content_type='application/json')
        json_data = JSONRenderer().render(serializer.errors)
        return HttpResponse(json_data, content_type='application/json',status=400)

PUT:
	updation:
		partial updation
		full updation
		update() method override in serializer class

update record with pk-1 with provided data
			==>Existing instance, provided data must be required.

serializers.py
--------------------
    def update(self, instance, validated_data):
        instance.eno = validated_data.get('eno',instance.eno)
        instance.ename = validated_data.get('ename', instance.ename)
        instance.esal = validated_data.get('esal', instance.esal)
        instance.eaddr = validated_data.get('eaddr', instance.eaddr)
        instance.save()
        return instance

views.py
-------------
    def put(self,request,*args,**kwargs):
        json_data = request.body
        stream = io.BytesIO(json_data)
        pdata = JSONParser().parse(stream)
        id = pdata.get('id')
        emp = Employee.objects.get(id=id)
        serializer = EmployeeSerializer(emp,data=pdata)
        if serializer.is_valid():
            serializer.save()
            msg = {'msg':'Resource updated successfully.....'}
            json_data = JSONRenderer().render(msg)
            return HttpResponse(json_data,content_type='application/json')
        json_data = JSONRenderer().render(serializer.errors)
        return HttpResponse(json_data, content_type='application/json',status=400)

test.py
----------
def update_resource(id):
    new_emp = {
        'id':id,
        'esal':32000,
        'eaddr':'Delhi'
    }
    resp = requests.put(BASE_URL + END_POINT, data=json.dumps(new_emp))
    print(resp.status_code)
    print(resp.json())
update_resource(1)

D:\REST_API_28MAY_4PM\withrestc1>py test.py
400
{'eno': ['This field is required.'], 'ename': ['This field is required.']}

-->We provided only two-fields
-->Provide all fields in test.py then run
-->For partial updation we have to give:
	serializer = EmployeeSerializer(emp,data=pdata,partial=True)

DELETE:
-------------
test.py
----------
def delete_resource(id):
    data = {
        'id':id
    }
    resp = requests.delete(BASE_URL + END_POINT, data=json.dumps(data))
    print(resp.status_code)
    print(resp.json())
delete_resource(1)

views.py
-------------
def delete(self,request,*args,**kwargs):
	json_data = request.body
    stream = io.BytesIO(json_data)
    pdata = JSONParser().parse(stream)
    id = pdata.get('id')
    emp = Employee.objects.get(id=id)
    emp.delete()
    msg = {'msg':'Resource deleted successfully....'}
    json_data = JSONRenderer().render(msg)
    return HttpResponse(json_data,content_type='application/json')

Serializers:
	1.Serialization
	2.Deserialization
	3.Validations

Validatons by using serializers:
-----------------------------------------------
1.Field level validation
		esal min 5000

2.Object level validation
		If name is sunny then compulsory esal should be min 50000

3.By using validators
		in-built validators

1.Field level validation:
		esal min 5000

clean_esal()
clean()

vaidate_esal()
validate()

serializers.py
--------------------
class EmployeeSerializer(serializers.Serializer):
	-----------
	def validate_esal(self,value):
        if value < 5000:
            raise serializers.ValidationError('Employee salary should be minimum 5000')
        return value

2).Object level validation:
		If ename is sunny then compulsory esal should be min 50000
		validate()

serializers.py
--------------------
    def validate(self,data):
        ename = data.get('ename')
        esal = data.get('esal')
        if ename.lower() == 'sunny':
            if esal < 50000:
                raise serializers.ValidationError('Sunny sal should be minimum 50000')
        return data

3).By using validator attribute
----------------------------------------------
ename = serializers.CharField(max_length=4)

D:\REST_API_28MAY_4PM\withrestc1>py test.py
400
{'ename': ['Ensure this field has no more than 4 characters.']}

serializers.py
--------------------
def multiples_of_1000(value):
    print('Validation by validator attribute')
    if value%1000 != 0:
        raise serializers.ValidationError('Employee sal should be multiples of 1000')

 esal = serializers.FloatField(validators=[multiples_of_1000])

Problems with normal serialization
----------------------------------------------------
1.We have to define all fields(like eno,ename,esal......)
2.Implement create() and update() methods explicitly
				we should go for ModelSerializer

serializers.py
-------------------
class EmployeeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Employee
        fields = '__all__'

field validation:
-------------------------
class EmployeeSerializer(serializers.ModelSerializer):
    esal = serializers.FloatField(validators=[multiples_of_1000])
 
Django REST Framework Views:
-------------------------------------------------
	DRF provides 2-classes to define business logic for our API Views

1.APIView
2.ViewSet

1).APIView:
-----------------
-->It is the most basic class to build REST APIs. It is similar to Django traditional View class.
-->It is the child class to Django View class.
-->It allows us to use standard HTTP methods as functions like get(),post(),put()..
-->We have to write complete code for business logic and hence programmer having complete control on the logic.
-->We can understand flow of execution very clearly.
-->Best suitable for complex operations like working with multiple datasource.
-->We have to define url mappings manually.

2).ViewSet:
----------------
list(),create(),retrieve(),update(),partial_update(),destroy()
developing very simple API's
CRUD API
Router concept

How to send Response in APIViews:
------------------------------------------------------
django-admin startproject withrestc2
py manage.py startapp testapp
Add 'rest_framework' and 'testapp' in settings.py

views.py
------------
from rest_framework.views import APIView
from rest_framework.response import Response
class TestAPIView(APIView):
    def get(self,request,*args,**kwargs):
        colors = ['RED','YELLOW','GREEN','BLUE']
        return Response({'msg':'Happy Valentines Day....','colors':colors})#Response class is responsible to convert python dict to json_data

urls.py:
	path('api/', views.TestAPIView.as_view())

views.py
------------
def put(self,request):
	return Response({'msg': 'This response from PUT method APIView'})

def delete(self,request):
	return Response({'msg': 'This response from DELETE method APIView'})

def patch(self,request):
    return Response({'msg': 'This response from PATCH method APIView'})
